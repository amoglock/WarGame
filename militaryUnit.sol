
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "gameObject.sol";
//import "baseStation.sol";
interface Base {
    function addUnit(uint256 unitId, uint addr, string typeUnit) external;  
}


contract militaryUnit is gameObject {

    uint public warriorAttack = 3;
    uint public archerAttack = 2;
    address public baseAddr; 

    constructor(Base baseAddress, uint unitId, uint addr, string typeUnit) public {
        baseAddress.addUnit(unitId, addr, typeUnit);
        baseAddr = baseAddress;
        tvm.accept();
    }


    function attackEnemy(InterfaceGameObject enemyAddr, string unitType, uint attackPower) public {
        if (unitType == "base") {
            enemyAddr.attackBase(attackPower);
        } else if (unitType == "warrior"){
            enemyAddr.attackWarrior(attackPower);
        } else if (unitType == "archer"){
            enemyAddr.attackWarrior(attackPower);
            tvm.accept();
        }
        
    }

    function getAttackPower() virtual public view returns (string, uint){
        return("Warrior attack power =", warriorAttack);
        return("Archer attack power =", archerAttack);
    }

    function getArmor() virtual override view internal returns  (string , uint) {
        return("Base armor = ", armorBase);
        return("Warrior armor = ", armorWarrior);
        return("Archer armor = ", armorArcher);
    }


}    