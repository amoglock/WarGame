
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "interfaceGameObject.sol";


contract gameObject is InterfaceGameObject {

    // Health of units.
    uint private healthBase = 15;
    uint private healthWarrior = 8;
    uint private healthArcher = 6;
    
    // Armor of units.
    uint public armorBase = 0;
    uint public armorWarrior = 3;
    uint public armorArcher = 2;
    
    // Enemies adress.
    address public lastAttack;
    address public baseKiller;
    address public warriorKiller;
    address public archerKiller;

    // Functions getAttack from enemy.
    function attackBase(uint attack) external override returns(string){
        uint health = healthBase;
        require(health > 0);
        if (attack < health) {
        health = health - attack;
        healthBase = health;
        lastAttack = msg.sender;
        } else {
            baseKiller = msg.sender;
            return("you have destroyed the enemy's base.");
            healthBase = 0;
        }     
        tvm.accept();  
    }
    
    function attackWarrior(uint attack) external override returns(string){
        uint health = healthWarrior;
        require(health > 0 && attack > armorWarrior);
        if (attack < health) {
        attack = attack - armorWarrior;
        health = health - attack;
        healthWarrior = health;
        lastAttack = msg.sender;  
        } else {
            warriorKiller = msg.sender;
            return("you have destroyed the enemy's warrior.");
            healthWarrior = 0;
        }
        tvm.accept();       
    }    

    function attackArcher(uint attack) external override returns(string){
        uint health = healthArcher;
        require(health > 0 && attack > armorArcher);
        if (attack < health) {
        attack = attack - armorArcher;
        health = health - attack;
        healthArcher = health;
        lastAttack = msg.sender;
        } else {
            archerKiller = msg.sender;
            return("you have destroyed the enemy's archer.");
            healthArcher = 0;
        }
        tvm.accept();       
    }    

    //Function get armor for units.
    function getArmor() virtual view internal returns (string , uint){
        return("Base armor = ", armorBase);
        return("Warrior armor = ", armorWarrior);
        return("Archer armor = ", armorArcher);
    }

    // Function for destroy contract and transfer all resources.
    function destroy(address killer) virtual override external {
        killer.transfer(1, true, 160);
        tvm.accept();
    }

    // Check dead or alive units. 
    function checkObject(string object) public view returns (string, address){
        if (object == "warrior") {
            require(healthWarrior == 0);
            return ("Your object is dead. You must destroy this object. Destroyed by ", warriorKiller);   
        } else if (object == "archer") {
            require(healthArcher == 0);
            return ("Your object is dead. You must destroy this object. Destroyed by ", archerKiller);
        } else if(object == "base") {
            require(healthBase == 0);
            return ("Your object is dead. You must destroy this object. Destroyed by ", baseKiller);
        } else {
            return ("Your object is alive. Last attack from ", lastAttack);
        }
    } 



}
